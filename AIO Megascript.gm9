# All-in-one GM9 Megascript
# last changed: 20180211
# author: annson24 
# credits: d0k3, 8bitwonder, windows_server_2003, SvenDaHacker64, MyLegGuy, emillois
echo ""
set PREVIEW_MODE off


















####################START OF SCRIPT####################

@Start

labelsel -o -s "annson24's All-in-one GM9 Megascript\n(Page 1/2)" MainMenu_*
goto Start



###################NAND BACKUP OPTIONS###################

@MainMenu_NandBackupOptions

labelsel -o -s "Choose a backup option." Backup_*
goto Start



###################SYSNAND BACKUP###################

@Backup_Sysnand

if	ask "Create a SysNAND backup in $[GM9OUT]?\n \nPlease make sure you have\nenough storage space."
	findnot $[GM9OUT]/$[DATESTAMP]_$[SERIAL]_sysnand_??.bin OUTPATH

	if	cp -h S:/nand_minsize.bin $[OUTPATH]
		echo "Backup created successfully:\n$[OUTPATH]"
	
	else
		echo "Backup failed."
		
	end

else
#	echo "Operation cancelled."

end
goto MainMenu_NandBackupOptions



###################EMUNAND BACKUP###################

@Backup_Emunand

if	ask "Create a EmuNAND backup in $[GM9OUT]?\n \nPlease make sure you have\nenough storage space."
	findnot $[GM9OUT]/$[DATESTAMP]_$[SERIAL]_emunand_??.bin OUTPATH
	
	if	cp -h E:/nand_minsize.bin $[OUTPATH]
		echo "Backup created successfully:\n$[OUTPATH]"
		
	else
		echo "Backup failed."
	
	end
	
else
#	echo "Operation cancelled."

end
goto MainMenu_NandBackupOptions



###################NAND RESTORE OPTIONS###################

@MainMenu_NandRestoreOptions

labelsel -o -s "Choose a restore option." Restore_*
goto Start



###################SYSNAND FULL RESTORE###################

@Restore_Sysnand(full)

if	chk $[HAX] "ntrboot"
	
	if	filesel "Select NAND Backup." $[GM9OUT]/*nand_???.bin NANDBAK
	
		if	ask "WARNING:\nSystem exploit will not be protected.\nNEVER use an EmuNAND image with this\nscript - it may brick your device.\n \nFully restore\n$[NANDBAK]\nto SysNAND?"
			
			if	allow S:/nand.bin
				imgmount $[NANDBAK]
				
				if	verify I:/nand_minsize.bin
					
					if	inject -n I:/nand_minsize.bin S:/nand.bin@0
						imgumount
						echo "$[NANDBAK]\nsuccessfully restored to SysNAND."
						
					else
						echo "An error occurred during the transfer\nPlease try again."
						
					end
					
				else
					echo "Not a valid NAND bakup."
					
				end
				
			else
				echo "Permissions denied, restore cancelled."
				
			end
			
		else
			echo "Operation cancelled."
			
		end
		
	else
		echo "Operation cancelled."
		
	end
	
else
	echo "ERROR!\nThis script requires ntrboot to run."
	
end
goto MainMenu_NandRestoreOptions



###################SYSNAND SAFE RESTORE###################

@Restore_Sysnand(safe)

if	chk -u $[HAX] ""
	
	if	chk -u $[HAX] "ntrboot"
		
		if	filesel "Select NAND Backup." $[GM9OUT]/*nand_???.bin NANDBAK
			
			if	ask "Safe restore\n$[NANDBAK]\nto SysNAND?"
				if	allow S:/ctrnand_full.bin
					allow S:/twln.bin
					allow S:/twlp.bin
					
					imgmount $[NANDBAK]
					find I:/ctrnand_full.bin NULL
					find I:/twln.bin NULL
					find I:/twlp.bin NULL
					
					if	verify I:/nand_minsize.bin
						
						if	cp -w -n I:/ctrnand_full.bin S:/ctrnand_full.bin
							
							if	cp -w -n I:/twln.bin S:/twln.bin
								
								if	cp -w -n I:/twlp.bin S:/twlp.bin
									imgumount
									echo "$[NANDBAK]\nsuccessfully restored to SysNAND."
									
								else
									echo "An error occurred during the transfer.\nPlease try again."
									
								end
								
							else
								echo "An error occurred during the transfer.\nPlease try again."
								
							end
							
						else
							echo "An error occurred during the transfer.\nPlease try again."
							
						end
						
					else
						echo "Not a valid NAND backup."
						
					end
					
				else
					echo "Permissions denied, restore cancelled."
					
				end
				
			else
				echo "Operation cancelled."
				
			end
			
		else
			echo "Operation cancelled."
			
		end
		
	else
		echo "Safe restore is not available on\nntrboot. Aborting to avoid a brick."
	
	end

else
	echo "No qualifying exploit was found.\nAborting to avoid bricking the unit."
	
end
goto MainMenu_NandRestoreOptions



###################EMUNAND RESTORE###################

@Restore_Emunand

if	filesel "Select NAND Backup." $[GM9OUT]/*nand_???.bin NANDBAK

	if	ask "Restore\n$[NANDBAK]\nto EmuNAND?"

		if	allow E:/nand.bin
			
			imgmount $[NANDBAK]
			find I:/nand_minsize.bin NULL
			
			if	verify I:/nand_minsize.bin
				
				if	inject -n I:/nand_minsize.bin E:/nand.bin@0
					imgumount
					echo "$[NANDBAK] successfully restored to EmuNAND."
					
				else
					echo "An error occurred during the transfer\nPlease try again."
					
				end
				
			else
				echo "Not a valid NAND backup."
				
			end
			
		else
			echo "Permissions denied, restore cancelled."
			
		end
		
	else
		echo "Operation cancelled."
		
	end
	
else
#	echo "Operation cancelled."
	
end
goto MainMenu_NandRestoreOptions



###################BOOT9STRAP INSTALL OPTIONS###################

@MainMenu_InstallBoot9Strap

labelsel -o -s "Choose an option." B9SInstall_*
goto Start



###################NORMAL BOOT9STRAP INSTALL###################

@B9SInstall_NormalInstall

if	ask "Install Boot9Strap Normally?\nYou should have the Boot9Strap files in the\nSD\boot9strap folder before proceeding."
	
	if	find 0:/boot9strap/boot9stra*.firm B9S
		
		if	sha $[B9S] $[B9S].sha
			
			if	allow -a S:
				allow -a 0:
				
				cp -w -n $[B9S] S:/firm0.bin
				cp -w -n $[B9S] S:/firm1.bin
				
				echo "Boot9Strap successfully installed."
				
			else
				echo "Permissions denied. Aborting."
				
			end
			
		else
			echo "Hash check failed on Boot9Strap file. Aborting."
			
		end
		
	else
		echo "Boot9Strap file not found!"
		
	end

else
#	echo "Operation cancelled."

end
goto MainMenu_InstallBoot9Strap



###################BOOT9STRAP PC-LESS INSTALL###################

@B9SInstall_PCLessInstall

if	ask "Install Boot9Strap PCLess?\nYou should have the proper files in\n0:/annson24 folder before proceeding."
	
	if	chk $[HAX] "a9lh"
	
		if	chk $[ONTYPE] "N3DS"
			echo "$[HAX] on $[ONTYPE] Detected!\n \nUninstall Hax first\nbefore installing boot9strap.\n \nAborting!"
			goto MainMenu_InstallBoot9Strap
			
		else
			
		end
		
	else
		
	end
	
	echo "Checking if all required files are present."
	if	find 0:/annson24/boot9strap/boot9stra*.firm B9S
		
		if	find 0:/annson24/Luma3DS LUMA
			
			if	find 0:/annson24/sdcompiled SDCOMP
				
				echo "Checking boot9strap hash."
				if	sha $[B9S] $[B9S].sha
					
					echo "Allowing write permissions."
					if	allow -a S:
						allow -a 0:
						allow -a 1:
						allow -a 9:
						
						echo "Backing up firm0.bin and firm1.bin."
						cp -w -o -s -n S:/firm0.bin 9:/sdcompiled/gm9/out/$[SERIAL]_firm0.bin
						cp -w -o -s -n S:/firm1.bin 9:/sdcompiled/gm9/out/$[SERIAL]_firm1.bin
						
						if	ask "(Optional)Inject FBI to H&S?"
							
							if find 0:/annson24/FBI FBISRC
								
								if	find 1:/title/00040010/20021300/content/00000004.app FBIPATH	#New US
									mv -w -n $[FBIPATH] $[FBIPATH].bak
									cp -w -n $[FBISRC]/NewUS.app $[FBIPATH]
									echo "FBI injected to H&S successfully."
									
								elif find 1:/title/00040010/00021300/content/00000005.app FBIPATH	#Old US
									mv -w -n $[FBIPATH] $[FBIPATH].bak
									cp -w -n $[FBISRC]/OldUS.app $[FBIPATH]
									echo "FBI injected to H&S successfully."
									
								elif find 1:/title/00040010/20022300/content/00000002.app FBIPATH	#New EU
									mv -w -n $[FBIPATH] $[FBIPATH].bak
									cp -w -n $[FBISRC]/NewEU.app $[FBIPATH]
									echo "FBI injected to H&S successfully."
									
								elif find 1:/title/00040010/00022300/content/00000008.app FBIPATH	#Old EU
									mv -w -n $[FBIPATH] $[FBIPATH].bak
									cp -w -n $[FBISRC]/OldEU.app $[FBIPATH]
									echo "FBI injected to H&S successfully."
									
								else
									echo "Sorry, $[REGION] $[ONTYPE] not yet supported.\nInject FBI manually.\nPlease contact the script author for support."
									
								end
								
							else
								echo "FBI not found.\nProceeding with B9S installation\nwithout FBI injection."
								
							end
							
						else
							echo "FBI inject declined.\nProceeding with B9S installation."
							
						end
						
						echo "Installing Boot9strap."
						cp -w -n $[B9S] S:/firm0.bin
						cp -w -n $[B9S] S:/firm1.bin
						
						echo "Copying Luma3ds to CTRNAND."
						rm -o -s 1:/boot.*
						rm -o -s 1:/rw/luma
						cp -w -n $[LUMA] 1:/
						mv -w -n 1:/luma 1:rw/luma
						
						echo "Copying the compiled files from source SD to RAM."
						cp -w -n $[SDCOMP] 9:/sdcompiled
						cp -w -n $[LUMA] 9:/sdcompiled
						
						goto SwapSD
						
					else
						echo "Permissions denied. Aborting."
						
					end
					
				else
					echo "Hash check failed on Boot9Strap file. Aborting."
					
				end
			
			else
				echo "SD compiled files not found. Aborting."
				
			end
			
		else
			echo "Luma3DS not found. Aborting."
			
		end
		
	else
		echo "Boot9Strap file not found. Aborting."
		
	end

else
#	echo "Operation cancelled."

end
goto MainMenu_InstallBoot9Strap



@SwapSD
if	switchsd "Swap SD card now."
	
	if	find 0:/gm9/scripts/*Megascript.gm9 NULL
	
		if	ask "Seems like SD cards are not swapped, continue anyway?"
			echo "Moving compiled files from RAM to target SD."
			mv -w -n 9:/sdcompiled 0:/
			echo "Boot9Strap Successfully installed."
			
		else
			goto SwapSD
		
		end
		
	else

	echo "Moving compiled files from RAM to target SD."
	mv -w -n 9:/sdcompiled 0:/
	echo "Boot9Strap Successfully installed."
		
	end
	
else
	echo "SD read error!\nPlease try again."
	goto SwapSD
	
end
goto Start



###################CFW UNINSTALL OPTIONS###################

@MainMenu_UninstallCFW

if	ask "Uninstall CFW?"
	
	if	chk $[ONTYPE] "N3DS"
		echo "N3DS/N2DS detected."
		goto Unhax_New

	else
		echo "O3DS/O2DS detected."
		goto Unhax_Old

	end

else
#	echo "Operation cancelled."

end
goto Start



@Unhax_New

if	sha S:/sector0x96.bin 82F2730D2C2DA3F30165F987FDCCAC5CBAB24B4E5F65C981CD7BE6F438E6D9D3
	
	if	find 1:/title/00040138/20000002/content/????????.app NATIVE_NCCH
		imgmount $[NATIVE_NCCH]
		verify G:/exefs/.firm
		set NATIVE_FIRM $[GM9OUT]/NATIVE_FIRM.firm
		cp -w G:/exefs/.firm $[NATIVE_FIRM]
		imgumount
		
		if	ask "!!WARNING!!\nThis will remove CFW and\nrevert your system to stock.\n \nProceed?"
			
			if	allow S:/firm0.bin
				allow 1:/
				rm -o -s 1:/boot.firm
				rm -o -s 1:/rw/luma
				cp -n $[NATIVE_FIRM] S:/firm0.bin
				cp -n $[NATIVE_FIRM] S:/firm1.bin
				echo "CFW uninstalled successfully"
				
			else
				echo "Permissions denied. Aborting."
				
			end
			
		else
			echo "CFW uninstall declined."
			
		end
		
	else
		echo "NATIVE_FIRM not found.\nIs this a N3DS?"
		
	end
	
else
	echo "Sector 0x96 is not genuine.\nCan't continue. Aborting."
	
end
goto Start



@Unhax_Old

set ERRORMSG "NATIVE_FIRM not found.\nIs this a O3DS?"
if	find 1:/title/00040138/00000002/content/????????.app NATIVE_NCCH
	imgmount $[NATIVE_NCCH]
	verify G:/exefs/.firm
	set NATIVE_FIRM $[GM9OUT]/NATIVE_FIRM.firm
	cp -w G:/exefs/.firm $[NATIVE_FIRM]
	imgumount
	
	if	ask "!!WARNING!!\nThis will remove CFW and\nrevert your system to stock.\n \nProceed?"
		
		if	allow S:/nand.bin
			allow 1:/
			rm -o -s 1:/boot.firm
			rm -o -s 1:/rw/luma
			cp -n $[NATIVE_FIRM] S:/firm0.bin
			cp -n $[NATIVE_FIRM] S:/firm1.bin
			echo "CFW uninstalled successfully"
			
		else
			echo "Permissions denied. Aborting."
			
		end
		
	else
		echo "CFW uninstall declined."
		
	end
	
else
	echo "NATIVE_FIRM not found.\nIs this a O3DS?"

end
goto Start



###################MAIN MENU PAGE 2###################

@MainMenu_More...

labelsel -o -s "annson24's All-in-one GM9 Megascript\n(Page 2/2)" Misc_*
goto Start



###################CARTRIDGE DUMP OPTIONS###################

@Misc_CartridgeDumpOptions

labelsel -o -s "Choose an Option." CartDump_*
goto MainMenu_Miscellaneous



###################CARTRIDGE P.HEADER DUMP###################

@CartDump_DumpCTRPrivateHeader

if	ask "Dump private header in $[GM9OUT]?"
	
	if	find C:/*priv.bin CARTPATH
		findnot $[GM9OUT]/Private-Header_???.bin OUTPATH
		cp -n $[CARTPATH] $[OUTPATH]
		echo "Private header successfully dumped:\n$[OUTPATH]"
		
	else
		echo "Cartridge not detected. Aborting."
		
	end
	
else
#	echo "Operation cancelled.
	
end
goto Misc_CartridgeDumpOptions



###################CARTRIDGE DUMP TO .3DS###################

@CartDump_DumpCTRto3DS

if	ask "Dump CTR cartridge to .3ds in $[GM9OUT]?\n \nPlease make sure you have\nenough storage space."
	find C:/*.3ds CARTPATH
	findnot $[GM9OUT]/$[DATESTAMP]_CTR_CARTDUMP_???.3ds OUTPATH
	
	if	cp $[CARTPATH] $[OUTPATH]
		echo "CTR cartridge successfully dumped:\n$[OUTPATH]"
	
		if	ask "Decrypt the dumped .3ds?"
			decrypt $[OUTPATH]
			echo "Dumped .3ds decrypted."
			
		else
		
		end
	
	else
		echo "Operation failed."
		
	end
	
else
#	echo "Operation cancelled."
	
end
goto Misc_CartridgeDumpOptions



###################CARTRIDGE DUMP TO .CIA###################

@CartDump_DumpCTRtoCIA

if	ask "Dump CTR cartridge as a .cia in $[GM9OUT]?\n \nPlease make sure you have\nenough storage space."
	find C:/*.3ds CARTPATH
	
	if	buildcia $[CARTPATH]
		echo "CTR cartridge successfully dumped:\n$[GM9OUT]"
	
	else
		echo "Operation failed."
		
	end
	
else
#	echo "Operation cancelled."

end
goto Misc_CartridgeDumpOptions



###################CARTRIDGE DUMP TO .NDS###################

@CartDump_DumpNTRtoNDS

if	ask "Dump NTR cartridge as a .nds in $[GM9OUT]?\n \nPlease make sure you have\nenough storage space."
	find C:/*.nds CARTPATH
	findnot $[GM9OUT]/$[DATESTAMP]_NTR_CARTDUMP_???.nds OUTPATH
	
	if	cp $[CARTPATH] $[OUTPATH]
		echo "NTR cartridge successfully dumped:\n$[OUTPATH]"
		
	else
		echo "Operation failed."
	
	end
	
else
#	echo "Operation cancelled."

end
goto Misc_CartridgeDumpOptions



###################.3DS TO .CIA CONVERTER###################

@Misc_Convert3DStoCIA

if	ask "Convert .3ds to .cia in $[GM9OUT]?"
	
	if	filesel "Select the .3ds file to convert." $[GM9OUT]/*.3ds 3DSCIA
		
		if	ask "Convert\n \n$[3DSCIA]\n \nto .cia?\n \nPlease make sure you have\nenough storage space."
			
			if	buildcia $[3DSCIA]
				echo "$[3DSCIA]\nconverted to .cia successfully in $[GM9OUT]"
				
			else
				echo "Operation failed."
				
			end
			
		else
			echo "Cancelled."
			
		end
		
	else
		echo "Cancelled."
		
	end

else
#	echo "Operation cancelled."
	
end
goto MainMenu_Miscellaneous



###################TITLE DUMP OPTIONS###################

@Misc_DumpTitletoCIAOptions

labelsel -o -s "Dump Installed Title to CIA" CIADump_*
goto MainMenu_Miscellaneous



###################DUMP CTRNAND TITLES###################

@CIADump_CTRNandTitles

if	ask "Dump CTRNAND title to .cia in $[GM9OUT]?\n \nPlease make sure you have\nenough storage space."
	
	if	filesel -d "Select the .tmd file of the title you want to dump." 1:/title/*.tmd TITLEPATH
		
		if	buildcia $[TITLEPATH]
			echo "Title dump successful in $[GM9OUT]
			
		else
			echo "Operation failed."
			
		end
		
	else
		echo "Cancelled."
		
	end
	
else
#	echo "Operation cancelled."
	
end
goto Misc_DumpTitletoCIAOptions



###################DUMP USER INSTALLED TITLES###################

@CIADump_UserInstalledTitles

if	ask "Dump user installed title to .cia in $[GM9OUT]?\n \nPlease make sure you have\nenough storage space."
	
	if	filesel -d "Select the .tmd file of the title you want to dump." A:/title/*.tmd TITLEPATH
		
		if	buildcia $[TITLEPATH]
			echo "Title dump successful in $[GM9OUT]
			
		else
			echo "Operation failed."
			
		end
		
	else
		echo "Cancelled."
		
	end
	
else
#	echo "Operation cancelled."
	
end
goto Misc_DumpTitletoCIAOptions



###################DUMP TWLNAND TITLES###################

@CIADump_TWLNandTitles

if	ask "Dump TWLNAND title to .cia in $[GM9OUT]?\n \nPlease make sure you have\nenough storage space."
	
	if	filesel -d "Select the .tmd file of the title you want to dump." 2:/title/*.tmd TITLEPATH
		
		if	buildcia $[TITLEPATH]
			echo "Title dump successful in $[GM9OUT]
			
		else
			echo "Operation failed."
			
		end
		
	else
		echo "Cancelled."
		
	end
	
else
#	echo "Operation cancelled."
	
end
goto Misc_DumpTitletoCIAOptions



###################DUMP BOOT9 AND BOOT11###################

@Misc_DumpBoot9&Boot11

if	ask "Create boot9 & boot11 dumps in $[GM9OUT]?"
	if	find $[GM9OUT]/boot9.bin OLDBOOT9
		mv -w -n $[OLDBOOT9] $[OLDBOOT9].old
	
	else
		
	end

	if	find $[GM9OUT]/boot11.bin OLDBOOT11
		mv -w -n $[OLDBOOT11] $[OLDBOOT11].old
	
	else
		
	end

	cp -w -n M:/boot9.bin $[OLDBOOT9]
	cp -w -n M:/boot11.bin $[OLDBOOT11]
	echo "Boot9 & Boot11 successfully dumped in\n$[GM9OUT]"
	
else
#	echo "Operation cancelled."

end
goto MainMenu_Miscellaneous



###################DUMP OTP###################

@Misc_DumpOTP

if	ask "Dump otp.bin in $[GM9OUT]? \n(This will overwrite any existing otp.bin!)"
	set OUTPATH $[GM9OUT]/$[SERIAL]_otp.bin
	cp -w -n M:/otp.mem $[OUTPATH]
	echo "Dump created successfully:\n$[OUTPATH]"
	
else
#	echo "Operation cancelled."
	
end
goto MainMenu_Miscellaneous



###################DUMP CITRA FILES###################

@Misc_DumpCITRAFiles

if	ask "Create dump of Citra files in $[GM9OUT]/Citra? \n(This will overwrite any existing Citra files!)\n(May fail if you use a custom font!)\n(This will dump System Archives)\n(This will dump Shared Fonts)\n(This will dump config)"
	
	set CITRA 0:/gm9/out/Citra/user/nand

	mkdir $[CITRA]/data/00000000000000000000000000000000/sysdata/00010017/00000000
	mkdir $[CITRA]/00000000000000000000000000000000/title/000400db/00010302/content
	mkdir $[CITRA]/00000000000000000000000000000000/title/0004009b/00010202/content
	mkdir $[CITRA]/00000000000000000000000000000000/title/0004009b/00010402/content
	mkdir $[CITRA]/00000000000000000000000000000000/title/0004009b/00014002/content
	mkdir $[CITRA]/00000000000000000000000000000000/title/0004009b/00014102/content
	mkdir $[CITRA]/00000000000000000000000000000000/title/0004009b/00014202/content
	mkdir $[CITRA]/00000000000000000000000000000000/title/0004009b/00014302/content
	
	set OUTCONFIG $[CITRA]/data/00000000000000000000000000000000/sysdata/00010017/00000000/config

	inject 1:/data/$[SYSID0]/sysdata/00010017/00000000@6000:8000 $[OUTCONFIG]@0
	
	set OUT1 $[CITRA]/00000000000000000000000000000000/title/0004009b/00010202/content/00000000.app.romfs
	set OUT2 $[CITRA]/00000000000000000000000000000000/title/0004009b/00010402/content/00000000.app.romfs
	set OUT3 $[CITRA]/00000000000000000000000000000000/title/0004009b/00014002/content/00000000.app.romfs
	set OUT4 $[CITRA]/00000000000000000000000000000000/title/000400db/00010302/content/00000000.app.romfs
	set OUT5 $[CITRA]/00000000000000000000000000000000/title/0004009b/00014102/content/00000000.app.romfs
	set OUT6 $[CITRA]/00000000000000000000000000000000/title/0004009b/00014202/content/00000000.app.romfs
	set OUT7 $[CITRA]/00000000000000000000000000000000/title/0004009b/00014302/content/00000000.app.romfs

	imgmount 1:/title/0004009b/00010202/content/00000000.app
	inject G:/romfs.bin@1000:108898 $[OUT1]@0
	imgumount
	imgmount 1:/title/0004009b/00010402/content/00000009.app
	inject G:/romfs.bin@1000:357A0 $[OUT2]@0
	imgumount
	imgmount 1:/title/0004009b/00014002/content/00000000.app
	inject G:/romfs.bin@1000:160FDB $[OUT3]@0
	imgumount
	imgmount 1:/title/000400db/00010302/content/0000000c.app
	inject G:/romfs.bin@1000:1D0E4 $[OUT4]@0
	imgumount
	imgmount 1:/title/0004009b/00014102/content/00000001.app
	inject G:/romfs.bin@1000:17205A $[OUT5]@0
	imgumount
	imgmount 1:/title/0004009b/00014202/content/00000001.app
	inject G:/romfs.bin@1000:80E48 $[OUT6]@0
	imgumount
	imgmount 1:/title/0004009b/00014302/content/00000001.app
	inject G:/romfs.bin@1000:1BEAE2 $[OUT7]@0
	imgumount
	
	echo "Dump created succesfully:\n$[GM9OUT]/Citra"
	
else
#	echo "Operation cancelled."
	
end
goto MainMenu_Miscellaneous



###################DUMP HOMEMENU TO CIA###################

@Misc_DumpHomeMenutoCIA

if ask "Dump HomeMenu to .cia?\n \nPlease make sure you have\nenough storage space."
	set CIA2 "$[OUTPATH]/homemenu.cia"
	
	if	find 1:/title/00040030/00008202/content/*.tmd TMD
		echo "JPN region detected."

		if	buildcia $[TMD]
			find $[OUTPATH]/0004003000008202* CIA1
			
		else
			echo "Operation failed."
			goto MainMenu_Miscellaneous
			
		end
		
	elif find 1:/title/00040030/00008F02/content/*.tmd TMD
		echo "USA region detected."
		
		if	buildcia $[TMD]
			find $[OUTPATH]/0004003000008F02* CIA1
			
		else
			echo "Operation failed."
			goto MainMenu_Miscellaneous
			
		end
		
	elif find 1:/title/00040030/00009802/content/*.tmd TMD
		echo "EUR region detected."
		
		if	buildcia $[TMD]
			find $[OUTPATH]/0004003000009802* CIA1
			
		else
			echo "Operation failed."
			goto MainMenu_Miscellaneous
			
		end
		
	elif find 1:/title/00040030/0000A102/content/*.tmd TMD
		echo "CHN region detected."
		
		if	buildcia $[TMD]
			find $[OUTPATH]/000400300000A102* CIA1
			
		else
			echo "Operation failed."
			goto MainMenu_Miscellaneous
			
		end
		
	elif find 1:/title/00040030/0000A902/content/*.tmd TMD
		echo "KOR region detected."
		
		if	buildcia $[TMD]
			find $[OUTPATH]/000400300000A902* CIA1
			
		else
			echo "Operation failed."
			goto MainMenu_Miscellaneous
			
		end
		
	elif find 1:/title/00040030/0000B102/content/*.tmd TMD
		echo "TWN region detected."
		
		if	buildcia $[TMD]
			find $[OUTPATH]/000400300000B102* CIA1
			
		else
			echo "Operation failed."
			goto MainMenu_Miscellaneous
			
		end
			
	else
		echo "Unknown Region.\nPlease contact the script author.\Aborting."
		goto MainMenu_Miscellaneous
	
	end
	
	mv -w -n $[CIA1] $[CIA2]
	echo "HomeMenu Dumped in:\n$[OUTPATH]"
	
else
#	echo "Operation cancelled."
	goto MainMenu_Miscellaneous
	
end

if	ask "Decrypt $[CIA2]?"
	decrypt $[CIA2]
	echo "$[CIA2] decrypted"
	
else
	echo "Decrypt declined."
	
end
goto MainMenu_Miscellaneous



###################FRIENDSAVE BACKUP AND RESTORE OPTIONS###################

@Misc_FriendSaveBackup&Restore

labelsel -o -s "Friend Save Options" FSave_*
goto MainMenu_Miscellaneous


###################FRIENDSAVE BACKUP###################

@FSave_Backup

if	ask "Create friendsave in $[GM9OUT]?"
	findnot $[GM9OUT]/friendsave_??? OUTPATH
	cp 1:/data/$[SYSID0]/sysdata/00010032/00000000 $[OUTPATH]
	echo "Backup created succesfully:\n$[OUTPATH]"
	
else
#	echo "Operation cancelled."
	
end
goto Misc_FriendSaveBackup&Restore



###################FRIENDSAVE RESTORE###################

@FSave_Restore

if	filesel "Select the friendsave you want to restore." $[GM9OUT]/friendsave_* FRIEND
	
	if	ask "Restore $[FRIEND]?"
		set OUTPATH 1:/data/$[SYSID0]/sysdata/00010032/00000000
		cp -w $[FRIEND] $[OUTPATH]
		echo " Friend-save restored successfully:\n$[OUTPATH]
		
	else
		echo "Operation cancelled."
		
	end
	
else
#	echo "Operation cancelled."
	
end
goto Misc_FriendSaveBackup&Restore



###################LOCALFRIENDCODESEED BACKUP AND RESTORE OPTIONS###################

@Misc_LocalFriendCodeBackup&Restore

labelsel -o -s "LocalFriendCodeSeed Options" LFCS_*
goto MainMenu_Miscellaneous



###################LOCALFRIENDCODESEED BACKUP###################

@LFCS_Backup

if	ask "Create a LocalFriendCodeSeed_B backup in $[GM9OUT]?"
	findnot $[GM9OUT]/$[SERIAL]_LocalFriendCodeSeed_B_??? OUTPATH
	cp -w 1:/rw/sys/LocalFriendCodeSeed_B $[OUTPATH]
	echo "Backup created successfully:\n$[OUTPATH]"
	
else
#	echo "Operation cancelled."
	
end
goto Misc_LocalFriendCodeBackup&Restore



###################LOCALFRIENDCODESEED RESTORE###################

@LFCS_Restore

if	ask "Restore LocalFriendCodeSeed_B from $[GM9OUT]?\n(This will overwrite your 3DS's current\nLocalFriendCodeSeed_B!)"

	if	filesel "Select the LocalFriendCodeSeed you want to restore." $[GM9OUT]/*LocalFriendCodeSeed_B_* COPYPATH 
		set OUTPATH 1:/rw/sys/LocalFriendCodeSeed_B
		cp -w $[COPYPATH] $[OUTPATH]
		echo "LocalFriendCodeSeed_B restored successfully:\n$[OUTPATH]"
		
	else
		echo "Operation cancelled."
		
	end
	
else
#	echo "Operation cancelled."
	
end
goto Misc_LocalFriendCodeBackup&Restore



###################GBAVC BACKUP AND RESTORE OPTIONS###################

@Misc_GBAVCSaveBackup&Restore

labelsel -o -s "gbavc.sav Options\nFor GodMode9 v.1.4.1 and below only." GBAVC_*
goto MainMenu_Miscellaneous



###################GBAVC BACKUP###################

@GBAVC_Backup

if	ask "Create a gbavc.sav backup in $[GM9OUT]?"
	findnot $[GM9OUT]/gbavc_???.sav OUTPATH
	cp -w S:/gbavc.sav $[OUTPATH]
	echo "Backup created successfully:\n$[OUTPATH]"
	
else
#	echo "Operation cancelled."
	
end
goto Misc_GBAVCSaveBackup&Restore



###################GBAVC RESTORE###################

@GBAVC_Restore

if	ask "Restore gbavc.sav from $[GM9OUT]?\n(This will overwrite your 3DS's current\ngbavc.sav file!)
	
	if	filesel "Select the gbavc.sav you want to restore." $[GM9OUT]/gbavc_???.sav COPYPATH
		cp -w -n $[COPYPATH] S:/gbavc.sav
		echo "gbavc.sav restored successfully."
		
	else
		echo "Operation cancelled."
		
	end
	
else
#	echo "Operation cancelled."
	
end
goto Misc_GBAVCSaveBackup&Restore



###################NNTENDO 3DS FOLDER SWAP###################

@Misc_Nintendo3DSFolderSwap

if	ask "Swap your current Nintendo 3DS folder with another?"
	
	@SwapStart
	if	dirsel "Swap with which folder?\nYour current folder will be renamed as\nthe folder you swapped with." 0: DESIREDPATH
		
		if	ask "Use $[DESIREDPATH]?"
			set ORIGINALPATH "0:/Nintendo 3DS"
			mv -n -w $[ORIGINALPATH] "0:/Nintendo 3DSTEMP"
			mv -n -w $[DESIREDPATH] $[ORIGINALPATH]
			mv -n -w "0:/Nintendo 3DSTEMP" $[DESIREDPATH]
			echo "Folders successfully swapped."
			
		else
			goto SwapStart
			
		end
		
	else
		"Operation Cancelled."
		
	end
	
else
#	echo "Operation cancelled."
	
end
goto MainMenu_Miscellaneous



###################REBOOT###################

@MainMenu_Reboot

if	ask "Reboot?"
	echo "##############################\n###########Script by annson24###########\n##############################"
	reboot
else
	goto Start
end



###################SHUTDOWN###################

@MainMenu_ShutDown

if	ask "Shut Down?"
	echo "##############################\n###########Script by annson24###########\n##############################"
	poweroff
else
	goto Start
end



###################QUIT###################

@MainMenu_Quit

if	ask "NANI!?"
	echo "OMAE WA MOU SHINDEIRU!!"
	echo "##############################\n###########Script by annson24###########\n##############################"
	goto WAKAS
	
else
	goto Start
	
end



@WAKAS